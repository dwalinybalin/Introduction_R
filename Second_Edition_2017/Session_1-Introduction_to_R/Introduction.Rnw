\documentclass[10pt,xcolor=dvipsnames]{beamer}
\setbeamertemplate{navigation symbols}{}


\usepackage{color}
\usepackage{ISGlobal_slides}
\usepackage{hyperref}
\usepackage{booktabs}
\usepackage{graphicx}

\SweaveOpts{keep.source=TRUE}
\setkeys{Gin}{width=0.6\textwidth}



\title[Introduction to R]{Introduction}
\author[Marcos Lopez-Sanchez]{Marcos Lopez-Sanchez}
\institute[ISGlobal]{ISGlobal Barcelona Institute for Global Health \\
\url{http://www.isglobal.org}
}

\date{Introduction to R \\ 2nd Edition \\  
May 30th 2017}



\begin{document}
\SweaveOpts{concordance=TRUE}

<<setup, echo=FALSE>>=
options(width = 60)
@ 


\frame{\titlepage}

\frame{\tableofcontents}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]\frametitle{What is \texttt{R} ?}

\begin{figure}
\centering
\includegraphics[width=1\textwidth]{Rgui}
\end{figure}

\end{frame}


\begin{frame}[fragile]\frametitle{What is \texttt{R} ?}

\texttt{R}: integrated suite of software for data manipulation, calculation and graphical display. Characteristics:\\
\begin{itemize}
\item Effective data handling and storage facility.
\item Suite of operators for calculations on arrays.
\item Large, coherent, integrated collection of intermediate tools for data analysis.
\item Graphical facilities for data analysis and display.
\item Simple and effective programming language (called \texttt{S}).
\end{itemize}

\end{frame}

\begin{frame}[fragile]\frametitle{What is \texttt{RStudio} ?}

\begin{figure}
\centering
\includegraphics[width=1\textwidth]{RStudio}
\end{figure}

\end{frame}


\begin{frame}[fragile]\frametitle{What is \texttt{RStudio} ?}

\texttt{RStudio}: Integrated development environment (IDE) for \texttt{R}. With several features:\\
\begin{itemize}
\item Code editor.
\item Syntax highlighting, code completion and smart indentation.
\item Visualization tools.
\item Integrated help and documentation.
\end{itemize}

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Installation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]\frametitle{Installing \texttt{R}}

\begin{itemize}
\item Distributed as an installer with the name \texttt{R-X.Y.Z-win.exe} (Most updated 3.4.0)
\item Maintained by the Comprehensive R Archive Network (CRAN)
\item \texttt{CRAN} page (Spanish mirror) -- \url{http://cran.es.r-project.org/}
\item Installer -- \url{https://cran.r-project.org/bin/windows/base/R-3.4.0-win.exe}
\end{itemize}

\end{frame}

\begin{frame}[fragile]\frametitle{Installing \texttt{RStudio}}

\begin{itemize}
\item The \texttt{RStudio} software under Windows OS is distributed as an installer with the name \texttt{RStudio-X.Y.Z.exe} (Most updated 1.0.143)
\item \texttt{RStudio} page -- \url{https://www.rstudio.com}
\item Installer -- \url{https://download1.rstudio.org/RStudio-1.0.143.exe}
\end{itemize}

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Concepts}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]\frametitle{How \texttt{R} works}

\textbf{Objects}: information stored in the active memory. Objects have a name, and can contain variables, data, functions, etc. In order to display the content of the object, type its name. Objects are created with the ``assign'' operator (\texttt{<-} or \texttt{->}), and it must start with a letter.

<<object, eval=TRUE>>=
a <- 1 # Assign the number 1 to the object a.
a # Print the contents of the object a.
@


\textbf{Functions}: Group of operations applied to none, one or several objects that returns another object as a result. Objects are passed as arguments. The use of parenthesis () indicates a function.

<<print, eval=TRUE>>=
print(a) # Print in the terminal the contents of the a object.
@

\end{frame}


\begin{frame}[fragile]\frametitle{Working directory}
Folder where \texttt{R} will search for files by default.\\
It's important to know where are we woking. There's a default path when starting \texttt{R} that can be shown with the function:

<<workdir, eval=TRUE>>=
getwd() # Prints the current working directory.
@

It can be changed by:
\begin{itemize}
\item Changing the \texttt{Start in} field in the \texttt{R} shortcut in windows before opening it.
\item Going to \texttt{File} --> \texttt{Change dir} inside \texttt{R}.
\item Use \texttt{setwd} function:
\end{itemize}

<<workdir2, eval=FALSE>>=
setwd("C:/Users/Marcos/Documents") # Set the working directory.
@

\end{frame}

\begin{frame}[fragile]\frametitle{Listing and deleting objects in memory}

\texttt{ls}: Function to show the names of all objects in memory.

<<ls, eval=TRUE>>=
ls() # Show the names of all objects in memory.
@

\texttt{rm}: Function to remove one or more objects from memory.

<<rm, eval=TRUE>>=
rm(a) # Remove the object 'a' from memory.
rm(list = ls()) # Remove all objects from memory.
@

\end{frame}

\begin{frame}[fragile]\frametitle{Getting help}
You can use \texttt{?} to obtain information about how to use a function. A page will open with general information 

<<help1, eval=FALSE>>=
?ls # Look for help about the 'ls' function
help("ls") # Look for help about the 'ls' function
@

If you remember part of the name of the function, you can search it with the function \texttt{apropos}.

<<help2, eval=FALSE>>=
apropos("ls") # Search all the functions that contain a "ls" in its name.
@

If we want to do something, but we don't know the function (if exists), we can use the function \texttt{help.search} to look for a word or words in the documentation.

<<help3, eval=FALSE>>=
??"List Objects" # Search all the functions that contain "List Objects" words in its description.
help.search("List Objects") # Search all the functions that contain "List Objects" words in its description.
@

\end{frame}

\begin{frame}[fragile]\frametitle{Loading libraries and packages I}

Libraries (or packages) are groups of functions that adds new methods or improved functionalities to \texttt{R}. To see which packages are installed the function \texttt{library} can be used. To see which are already loaded, use the \texttt{search} function.

<<search, eval=FALSE>>=
library() # Show the libraries installed.
search() # Show the libraries loaded in memory.
@

Installation of packages depends on the OS and \texttt{R} installation. The main repository of packages is \href{https://cran.r-project.org/}{CRAN}. \\

Packages can be installed with \texttt{install.packages} function, or if using \texttt{R}, or \texttt{RStudio}, with the interactive menu options.

<<installpackage, eval=FALSE>>=
install.packages("ggplot2") # Installs the ggplot2 package.
@

\end{frame}

\begin{frame}[fragile]\frametitle{Loading libraries and packages II}

Once the package is installed, it must be loaded into memory to access its functions.

<<library, eval=TRUE>>=
require(ggplot2) # If not installed, installs and loads.
library(ggplot2) # Load the library ggplot2.
@

Moreover, there are third-party repositories with packages like Bioconductor, specialized in biological and bioinformatics data analysis (\url{http://www.bioconductor.org/}) or Omegahat project, specialiced in statistical computing. (\url{http://www.omegahat.net/})

\end{frame}

\begin{frame}[fragile]\frametitle{Saving and loading objects I}

Objects can be saved from memory to disk, and they can be loaded later. It is done by the \texttt{save} and \texttt{load} functions. If no path is specified, by default it will be the working directory path.

<<Saving_Loading>>=
a <- 1
save(a, file = "test.rda") # Save the 'a' object in the 'test.rda' file.
rm(list = ls()) # Remove all the objects in the workspace.
ls()# list all the objects in workspace
load(file = "test.rda") # Load the 'a' object in the 'test.rda' file.
ls()# list all the objects in workspace
@

More than one object can be saved or loaded in this way. The extension of the data files usually it is ".rda", ".rdata", or even ".Rdata".

\end{frame}

\begin{frame}[fragile]\frametitle{Saving and loading objects II}

The workspace can be also saved and loaded in the same way as objects, using the function \texttt{save.image} and the same \texttt{load} function.

<<Saving_Loading2>>=
save.image("Rcourse.RData") # Save all objects in the workspace 
# to the 'Rcourse.RData' file.
rm(list = ls()) # Remove all the objects in workspace
ls() # list all the objects in workspace
load(file = "Rcourse.RData") # Load all objects in the workspace
# from the 'Rcourse.RData' file.
ls()# list all the objects in workspace
@

\end{frame}

\begin{frame}[fragile]\frametitle{Closing \texttt{R}}
When we have to close the session, we can click the close button of the window, go to the \texttt{File} menu and select quit, or use the \texttt{q} function. 

<<exit, eval=FALSE>>=
q()
@

\texttt{R} \emph{always} will ask us if we want to save the workspace. Saving the workspace we save all the variables and the commands used in the session, but if we are working with large datasets, it's recommended instead to save only the objects we are interested in or the results, as we will see later. I recommend choosing ``No'' and only save the image if it's really necessary. 
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data with R}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]\frametitle{Objects}
All the objects have two intrinsic attributes, \texttt{length} and \texttt{mode}:
\begin{itemize}
\item \texttt{length}: Number of elements of the object.
\item \texttt{mode}: Description of the basic type of the elements of the object.
\end{itemize}
\\
\\
There are four types of elements that we will see:
\begin{itemize}
\item \texttt{Numeric}: Numeric values.
\item \texttt{Character}: letters and words.
\item \texttt{Complex}: Complex values (1i).
\item \texttt{Logical}: \texttt{TRUE} or \texttt{FALSE} values.
\end{itemize}
For all modes, missing data is represented as \texttt{NA}.
\end{frame}

\begin{frame}[fragile]\frametitle{Mode: \texttt{Numeric}}
The most common mode is the \texttt{numeric} mode.

<<numeric1, eval=TRUE>>=
a <- 1
b <- 10
@

If we want to assign more than one element, we use the concatenate function ``c''.\\ If there are more than one element assigned to the object, then it's a vector of elements, in this case, numeric values.

<<numeric2, eval=TRUE>>=
c <- c(a, 5)
d <- c(c, b, 50, 100)
d
@
\end{frame}

\begin{frame}[fragile]\frametitle{Mode: \texttt{Character}}
When working with labelled variables or character strings, we will find the \texttt{character} mode. To create an object, the string must be flanked by double quotes ".

<<character1, eval=TRUE>>=
a <- "a"
b <- "10" # Number as a string
@

The concatenate function can be also applied to \texttt{character} mode values.\\ If there are more than one element assigned to the object, then it's a vector of elements, in this case, of character values.

<<character2, eval=TRUE>>=
c <- c(a, "c")
d <- c(c, b, "Hello", "Affected")
d
@
\end{frame}

\begin{frame}[fragile]\frametitle{Mode: \texttt{Complex} and Mode: \texttt{Factor}}
We will find the \texttt{complex} mode when working with complex numbers.

<<complex, eval=TRUE>>=
a <- 3i
mode(a)
@

The \texttt{logical} mode will be found when passing arguments (\texttt{TRUE/FALSE}) or when making comparisons.

<<logical, eval=TRUE>>=
b == "123"
d <- TRUE
d
@
\end{frame}

\begin{frame}[fragile]\frametitle{Object types}
There are several object types that allows one or more value modes. The following list is a brief summary of those:

\begin{table}[]
\centering
\label{my-label}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}lll@{}}
\toprule
\textbf{object} & \textbf{modes} & \textbf{several modes possible in the same object?} \\ \midrule
vector & \textit{numeric, character, complex or logical} & No \\
factor & \textit{numeric or character} & No \\
array & \textit{numeric, character, complex or logical} & No \\
matrix & \textit{numeric, character, complex or logical} & No \\
data frame & \textit{numeric, character, complex or logical} & Yes \\
time series & \textit{numeric, character, complex or logical} & No \\
list & \textit{numeric, character, complex, logical, function, expression...} & Yes \\ \bottomrule
\end{tabular}%
}
\end{table}
\end{frame}

\begin{frame}[fragile]\frametitle{Vectors and factors}
Vectors are the simplest object types, and it is a series of values of the same mode. It is usually considered a "variable".

<<vector, eval=TRUE>>=
a <- c(1,2,3,4,5)
a
b <- c("a", "b", "c", "d")
b
@

Factors on the other hand are considered as "categorical variables". They can be only of the \texttt{numeric} or the \texttt{character} modes.

<<factor, eval=TRUE>>=
c <- as.factor(c(1,2,3,4,5))
c
d <- as.factor(c("a", "b", "c", "d"))
d
@

\end{frame}

\begin{frame}[fragile]\frametitle{matrices and arrays}
Matrices are two-dimensional variables of the same mode, while arrays are k-dimensional.
<<matrices>>=
e <- matrix(data = c(1,2,3,4,5,6), nrow = 2, byrow = T)
e
f <- array(data = c(1,2,3,4,5,6,7,8), dim = c(2,2,2))
f
@
\end{frame}

\begin{frame}[fragile]\frametitle{data frame}
A data frame is the most common object type because it allows different modes in each column, vector or "variable". All the vectors must have the same length.

<<dataframe>>=
g <- data.frame(sample=c(1, 2, 3, 4, 5),
                treated=c(TRUE, TRUE, TRUE, FALSE, FALSE),
                hair=c("blond", "black", "auburn", "red", "gray"))
g
@
\end{frame}

\begin{frame}[fragile]\frametitle{time series}
Time series contains additional attributes such as frequency and dates.
<<timeseries>>=
h <- ts(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        frequency = 4,
        start = c(2017, 2))
h
@
\end{frame}

\begin{frame}[fragile]\frametitle{lists}
List can contain any type of objects, even lists.
<<lists>>=
d <- c(1, 5, 10, 50, 100)
i <- list(a, b, c, d, e, f, g, h)
str(i)
@

\end{frame}

\begin{frame}[fragile]\frametitle{Generating data: Regular sequences}
Regular sequences of integers can be generated with the use of the colon operator ``:'' or the \texttt{seq} function.
<<sequence1>>=
g <- 1:20
g
h <- seq(from = 20, to = 100, by = 20)
h
@

Additionally, the function \texttt{rep} allows repeating one element several times.
<<rep>>=
i <- rep(13, 6)
i
@

And finally, the function \texttt{expand.grid} makes all the possible combination between different vectors.
<<expand.grid>>=
j <- expand.grid(h=c(60,80), w=c(100, 300), sex=c("Male", "Female"))
@
\end{frame}

\begin{frame}[fragile]\frametitle{Generating data: Random sequences}
There are several probability density functions that allows generating random sequence of numbers. Here some examples:
\begin{table}[]
\centering
\label{my-label2}
\resizebox*{!}{\dimexpr\textheight-5\baselineskip\relax}{%
\begin{tabular}{@{}ll@{}}
\toprule
\textbf{Law} & \textbf{function} \\ \midrule
Gaussian (normal) & \texttt{rnorm(n, mean = 0, sd = 1)} \\
exponential & \texttt{rexp(n, rate = 1)} \\
gamma & \texttt{rgamma(n, shape, scale = 1)} \\
Poisson & \texttt{rpois(n, lambda)} \\
Weibull & \texttt{rweibull(n, shape, scale = 1)} \\
Cauchy & \texttt{rcauchy(n, location = 0, scale = 1)} \\
beta & \texttt{rbeta(n, shape1, shape2)} \\
``Student'' (t) & \texttt{rt(n, df)} \\
Fisher-Snedecor (F) & \texttt{rf(n, df1, df2)} \\
Pearson (\chi^2) & \texttt{rchisq(n, df)} \\
binomial & \texttt{rbinom(n, size, prob)} \\
multinomial & \texttt{rmultinom(n, size, prob)} \\
geometric & \texttt{rgeom(n, prob)} \\
hypergeometric & \texttt{rhyper(nn, m, n, k)} \\
logistic & \texttt{rlogis(n, location = 0, scale = 1)} \\
lognormal & \texttt{rlnorm(n, meanlog = 0, sdlog = 1)} \\
negative binomial & \texttt{rnbinom(n, size, prob)} \\
uniform & \texttt{runif(n, min = 0, max = 1)} \\
Wilcoxon's statistics & \texttt{rwilcox(nn, m, n)}, \texttt{rsignrank(nn, n)} \\ \bottomrule
\end{tabular}%
}
\end{table}
\end{frame}

\begin{frame}[fragile]\frametitle{Operators}
In addition to the elementary arithmetic operators (+, -, *, / and \textasciicircum ), R have available common arithmetic functions and useful function for vectors. Except some, those operators are applied to all elements of the vector, and are:
<<arith, eval=FALSE>>=
log(d) ## Logarithm
exp(d) ## Exponential
sin(d); cos(d); tan(d) ## Trigonometric functions
sqrt(d) ## Squared Root
max(d) ## Returns the maximum
min(d) ## Returns the minimum
length(d) ## Returns the number of elements in the vector
sum(d) ## Returns the sum
prod(d) ## Returns the product
mean(d) ## Returns the mean
var(d) ## Returns the variance
@
\end{frame}

\begin{frame}[fragile]\frametitle{Logical vectors}
R also allows manipulation of logical quantities. The elements of a logical vector can be \texttt{TRUE}, \texttt{FALSE} and \texttt{NA}. These are generated by conditions using logical operators. The logicals operators are <, <=, >, >=, == and !=.\\
Different conditions can be evaluated together with the AND (\string&) and OR (\string|) operators
<<Log1, eval=TRUE>>=
d1 <- d < 50
d1
d2 <- d < 75 & d >7
d2
!d2
@

Take care with the missing values NA or other types of ``missing'' values like NaN values (Not a Number) and Inf and -Inf
\end{frame}


\begin{frame}[fragile]\frametitle{Character vectors}
There are also vectors of character or ``words'' and are mainly used as variable labels. These character elements or words are delimited by the double quote character, and can be concatenated with the c() function as can be seen:

<<Char1, eval=TRUE>>=
e <- "PFC"
f <- "PM"
c(e,f)
@

Also there are functions that allows us to manipulate these character vectors, and with a bit of skill name variables easily:

<<Char2>>=
paste(e, f) # allows to concatenate strings
ef <- c(paste(e, 1:3, sep=""), paste(f, c(2.5, 10), sep=""))
ef
@
\end{frame}

\begin{frame}[fragile]\frametitle{Accessing values of an object by index I}
Objects can be subsetted by using the name of the object and a index vector in square brackets. There are 3 different types :
\begin{itemize}
\item A Logical vector: If we have a index vector of the same length as the vector from which the elements are to be selected.
<<Sub1, eval=TRUE>>=
d2 <- d < 75 & d >7
d3 <- d[d2]
@
\item A vector of positive integral quantities: The values in the index vector must lie in the set. The corresponding elements of the vector are selected and concatenated in that order.
<<Sub2, eval=TRUE>>=
d[3]
d[c(1,4,3,2,5)]
d[length(d):1]
@
\end{itemize}
\end{frame}

\begin{frame}[fragile]\frametitle{Accessing values of an object by index II}
\begin{itemize}

\item A vector of negative integral quantities: The index vector specifies the values to be excluded.
<<Sub3, eval=TRUE>>=
d[-3]
d[-(2:4)]
@

\end{itemize}
\end{frame}

\begin{frame}[fragile]\frametitle{Accessing values of an object by name I}
Objects can be subsetted also by using the labels of the object. there are several kinds of names (\texttt{names}, \texttt{rownames}, \texttt{colnames}, \texttt{dimnames}).

<<Sub4, eval=TRUE>>=
exposures <- c(2, 5, 10, 50, 100)
names(exposures) <- c(paste("PFC", 1:3, sep=""), paste("PM", c(2.5, 10), sep=""))
exposures
exposures[c("PFC3", "PM2.5")]
@

\end{frame}

\begin{frame}[fragile]\frametitle{Accessing values of an object by name II}
Additionally, \texttt{data frames} can be selected by using the name of the \texttt{data frame}, followed by a dollar operator and the name of the column of interest. All the other forms of subselection can be applied.
<<Sub5, eval=TRUE>>=
mtcars[1:2, ]
mtcars$mpg > 20
mtcars[mtcars$mpg > 25, ]
mtcars[mtcars$mpg > 25 & mtcars$carb == 1, ]
mtcars[mtcars$mpg > 25 & mtcars$carb == 1, ]$cyl
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Session Info}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]\frametitle{Session Info}

Finally, to see what R version was used to make these slides, the function SessionInfo shows the R version and the packages loaded.

<<SessionInfo>>=

sessionInfo()

@

\end{frame}

\end{document}





